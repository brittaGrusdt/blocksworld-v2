var log_likelihood_dirichlet = cache(function(table, stimulus){
  var par = filter(function(obj){
    return(obj.id == stimulus)
  }, globalStore.params_ll)[0]
  var alphas = [par["alpha_1"], par["alpha_2"], par["alpha_3"], par["alpha_4"]]
  var ll = Dirichlet({"alpha": Vector(alphas)}).score(Vector(table))
  return(ll)
})

// var log_likelihood_cn = cache(function(cn, table){
//   var probs = conditional_probs(table)
//   var p_dep = Math.abs(probs["P(C|A)"] - probs["P(C|-A)"])
//   return (p_dep==0 ? -Infinity : (cn=="dependent" ? Math.log(p_dep) : Math.log(1-p_dep)))
// })

// var log_likelihood = function(state){
//   // display('in loglikelihood')
//   var p = cn_to_prob(state)
//   return state.cn == "A || C" ?
//   //todo: should be truncated normal here!! (between 0 and min(pa=p[0], pc=p[1]))
//     Gaussian({mu:p[0]*p[1], sigma: globalStore.indep_sigma}).score(p[2]) :
//     // all dependent cns
//     (Beta({a:10, b:1}).score(p[0]) + Beta({a:1, b:10}).score(p[1]))
// }

var state_prior = cache(function(bias) {
  var distr =
    Infer({method:'enumerate', model:function(){
      var TableID = uniformDraw(globalStore.Tables)
      var Table = TableID.Table
      var cn = uniformDraw(globalStore.cns);
      var state = {"table": Table,
                   "cn": cn,
                   "stimulus": TableID.stimulus,
                   "id": TableID.id};
     // display(TableID)
     let logl_table =
       state.cn=="A implies C" ? TableID.logL_if_ac :
       state.cn=="A implies -C" ? TableID.logL_if_anc :
       state.cn=="C implies A" ? TableID.logL_if_ca :
       state.cn=="C implies -A" ? TableID.logL_if_cna :
       state.cn=="A || C" ? TableID.logL_ind :
       error("unknown cn: " + state.cn);

      // let logl_table = log_likelihood_dirichlet(state.table.params.ps, state.stimulus);
      // let logl_cn = log_likelihood_cn(cn, state.table);
      // let logl = logl_table + logl_cn
      factor(logl_table);
      return {"bn": state}
    }});
  // make sure that states that have almost 0-probability are excldued,
  // otherwise these states face a problem for the speaker who cannot say
  // anything because the log of the literal listener will always be -Infinity
  // return Infer({model:function(){
  //   var s = sample(distr)
  //   condition(Math.exp(distr.score(s)) > 0.0000011)
  //   return s
  // }})
  return(distr)
})
